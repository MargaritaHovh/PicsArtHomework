Crossword cheater
words = ['apple', 'annle', 'cherry', 'durian', 'elderberry', 'fig', 'grape']
def matching_words(words, our_word):
    result = []
    for i in words:
        if len(i) == len(our_word):
            for j in range(len(i)):
                if  not(our_word[j] != '*' and i[j] == our_word[j]):
                    break
                result.append(i)
    return result
our_word = input("Enter the word: ")
print(matching_words(words, our_word))

Analyze file
import collections
def analyze_file(filename):
    with open(filename, 'r') as file:
        reading = file.read()
        words = reading.split()
        lines = reading.split('\n')
        print("Words count is -", len(words))
        print("Character count is -", len(reading))
        print("Lines count is -", len(lines))
        
        print("Most frequent words ")
        word_freq = collections.Counter(words)
        for word, freq in word_freq.most_common(10):
            print(word,freq)
        
        
        search_word = input("Enter any word for searching: ")
        for i, line in enumerate(lines):
            if search_word in line:
                print("Line", i+1, ":", line)
            else:
                print("The word you are looking for is not found in the file ")
        
        
filename = input("Enter the file name:")
analyze_file(filename)


Hangman Game
import random
word_list = ["python", "java", "ruby", "javascript", "php"]
word = random.choice(word_list)
hidden_word = ["_"] * len(word)

max_guesses = 6

guessed_letters = []
remaining_guesses = max_guesses

while "_" in hidden_word and remaining_guesses > 0:
    print(" ".join(hidden_word))
    print(f"Guessed letters: {guessed_letters}")
    print(f"Remaining guesses: {remaining_guesses}\n")

    guess = input("Guess a letter: ").lower()
    if guess in guessed_letters:
        print("You already guessed that letter!\n")
        continue

    guessed_letters.append(guess)

    if guess in word:
        for i, letter in enumerate(word):
            if letter == guess:
                hidden_word[i] = guess
        print("Correct!\n")
    else:
        remaining_guesses -= 1
        print("Incorrect!\n")

if "_" not in hidden_word:
    print("You win!")
else:
    print(f"You lose! The word was {word}.")




Password Strength Checker
with open("file.txt") as f:
    dict_words = [word.strip().lower() for word in f.readlines()]
    
password = input("Enter password: ")
if len(password) < 8:
    print("Password is too short")

uppercase = False
lowercase = False
number = False
special_char = False
common_word = True

for i in password:
    if i.isupper():
        uppercase = True
    elif i.islower():
        lowercase = True
    elif i.isdigit():
        number = True
    elif not i.isalnum():
        special_char = True
        
for word in dict_words:
    if word in password.lower():
        common_word = False

if not uppercase:
    print("Password should include uppercase letters")
elif not lowercase:
    print("Password should include lowercase letters")
elif not number:
    print("Password should include numbers")
elif not special_char:
    print("Password should include special characters")
elif not common_word:
    print("Password should not include common dictionary words")
else:
    print("Your password is strong!")


Acronym
import random 
acronyms = {
    'NASA': ['National', 'Aeronautics', 'Space', 'Administration'],
    'NATO': ['North', 'Atlantic', 'Treaty', 'Organization'],
    'AIDS': ['Acquired', 'Immune', 'Deficiency', 'Syndrome'],
    'FEMA': ['Federal', 'Emergency', 'Management', 'Agency'],
    'SWAT': ['Special', 'Weapons', 'And', 'Tactics'],
    'AARP': ['American', 'Association', 'Of', 'Retired', 'Persons'],
    'FIFA': ['Fédération', 'Internationale', 'De', 'Football', 'Association'],
    'NASCAR': ['National', 'Association', 'For', 'Stock', 'Car', 'Auto', 'Racing'],
    'NYPD': ['New', 'York', 'City', 'Police', 'Department'],
    'PETA': ['People', 'For', 'The', 'Ethical', 'Treatment', 'Of', 'Animals'],
    'SARS': ['Severe', 'Acute', 'Respiratory', 'Syndrome'],
    'UNICEF': ['United', 'Nations', 'International', "Children's", 'Emergency', 'Fund'],
    'WYSIWYG': ['What', 'You', 'See', 'Is', 'What', 'You', 'Get'],
    'YMCA': ['Young', "Men's", 'Christian', 'Association'],
    'ZIP': ['Zone', 'Improvement', 'Plan'],
    'DVD': ['Digital', 'Versatile', 'Disc'],
    'FBI': ['Federal', 'Bureau', 'Of', 'Investigation'],
    'CNN': ['Cable', 'News', 'Network'],
    'ATM': ['Automated', 'Teller', 'Machine'],
    'HTML': ['Hypertext', 'Markup', 'Language'],
    'NHL': ['National', 'Hockey', 'League'],
    'NBA': ['National', 'Basketball', 'Association']
}

acronym = input("Enter acronym: ")
result = []
for i in acronyms[acronym.upper()]:
    word = random.choice(i.split())
    result.append(word)
print(result)


Namelist
with open("file.txt", "r") as file:
    names = file.read().splitlines()

def check_name(name):
    vowels = "aeiou"
    found_a = False
    found_u = False
    for letter in name:
        if letter in vowels:
            if not found_a and letter == "a":
                found_a = True
            elif found_a and not found_u and letter == "u":
                found_u = True
            elif found_a and found_u:
                return True
    return False

for name in names:
    if check_name(name.lower()):
        print(name)


File Compression
input_file = input("Enter the name of the input file: ")
output_file = input("Enter the name of the output file: ")

with open(input_file, 'r') as input_file, open(output_file, 'w') as output_file:
    data = input_file.read()
    current_char = ''
    count = 0
    for char in data:
        if char == current_char:
            count += 1
        else:
            if count > 0:
                output_file.write(current_char + str(count))
            current_char = char
            count = 1
    output_file.write(current_char + str(count))
    
    

Phone Book
import json
with open("contacts.json") as f:
    contacts = json.load(f)

while True:
    print("Phone Book Menu:")
    print("1. Add contact")
    print("2. Edit contact")
    print("3. Remove contact")
    print("4. View all contacts")
    print("5. Quit")

    choice = input("Enter your choice: ")

    if choice == "1":
        name = input("Enter name: ")
        surname = input("Enter surname: ")
        phone = input("Enter phone number: ")
        address = input("Enter address: ")
        contacts.append({"name": name, "surname": surname, "phone": phone, "address": address})
        print("Contact added successfully!")

    elif choice == "2":
        name = input("Enter name of contact to edit: ")
        for contact in contacts:
            if contact["name"] == name:
                surname = input("Enter new surname (press Enter to keep current value): ")
                if surname:
                    contact["surname"] = surname
                phone = input("Enter new phone number (press Enter to keep current value): ")
                if phone:
                    contact["phone"] = phone
                address = input("Enter new address (press Enter to keep current value): ")
                if address:
                    contact["address"] = address
                print("Contact updated successfully!")
                break
        else:
            print("Contact not found!")

    elif choice == "3":
        name = input("Enter name of contact to remove: ")
        for contact in contacts:
            if contact["name"] == name:
                contacts.remove(contact)
                print("Contact removed successfully!")
                break
        else:
            print("Contact not found!")

    elif choice == "4":
        print("All Contacts:")
        for contact in contacts:
            print(f"{contact['name']} {contact['surname']}: {contact['phone']}, {contact['address']}")

    elif choice == "5":
        with open("contacts.json", "w") as f:
            json.dump(contacts, f)
        print("Exiting program...")
        break

    else:
        print("Invalid choice. Please try again.")




Data Validator
import re
email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
url_pattern = r'^(http|https)://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
date_pattern = r'^\d{4}-\d{2}-\d{2}$'
number_pattern = r'^\d+$'
credit_card_pattern = r'^\d{4}-\d{4}-\d{4}-\d{4}$'
phone_pattern = r'^\d{3}-\d{3}-\d{4}$'

data_type = input("Enter the type of data to check: ")
data_type = data_type.lower()
data = input("Enter the data to check: ")

if data_type == 'email':
    pattern = email_pattern
elif data_type == 'url':
    pattern = url_pattern
elif data_type == 'date':
    pattern = date_pattern
elif data_type == 'number':
    pattern = number_pattern
elif data_type == 'credit card':
    pattern = credit_card_pattern
elif data_type == 'phone':
    pattern = phone_pattern
else:
    print("Invalid data type entered. Please try again.")
    exit()

if re.match(pattern, data) is not None:
    print("Valid", data_type)
else:
    print("Invalid", data_type)
    
    

Text Analyzer
import collections
input_file = "input.txt"
output_file = "output.txt"

with open(input_file) as f:
    text = f.read()

words = text.split()
num_words = len(words)

letters = [chr for chr in text if chr.isalpha()]
num_letters = len(letters)

sentences = text.split(".")
num_sentences = len(sentences)

letter_counts = collections.Counter(letters)
repeated_letters = [letter for letter, count in letter_counts.items() if count > 1]

if repeated_letters:
    most_common_letter = letter_counts.most_common(1)[0][0]
else:
    most_common_letter = "0"


word_counts = collections.Counter(words)
repeated_words = [word for word, count in word_counts.items() if count > 1]

if repeated_words:
    most_common_word = word_counts.most_common(1)[0][0]
else:
    most_common_word = "0"


with open(output_file, "w") as f:
    f.write(f"Words: {num_words}\n")
    f.write(f"Letters: {num_letters}\n")
    f.write(f"Sentences: {num_sentences}\n")
    f.write(f"Letter frequency: {most_common_letter}\n")
    f.write(f"Word frequency: {most_common_word}\n")
    
    
    
The Library Management System

with open('books.txt', 'r') as file:
    book_list = [line.strip() for line in file]


def add_book():
    author = input('Enter the author name: ')
    book = input('Enter the book name: ')
    publication_date = input('Enter the publication date: ')
    book_list.append(f'{author}, {book}, {publication_date}')
    print('Book added successfully!')


def remove_book():
    book_name = input('Enter the name of the book to be removed: ')
    for book in book_list:
        if book_name in book:
            book_list.remove(book)
            print('Book removed successfully!')
            break
    else:
        print('Book not found in the library!')


def view_all_books():
    print('List of all the books in the library:')
    for book in book_list:
        print(book)


def sort_books():
    book_list.sort()
    print('Books sorted successfully!')


def update_file():
    with open('books.txt', 'w') as file:
        for book in book_list:
            file.write(book + '\n')
while True:
    choice = input('Enter your choice: ')
    if choice == '1':
        add_book()
        update_file()
    elif choice == '2':
        remove_book()
        update_file()
    elif choice == '3':
        view_all_books()
    elif choice == '4':
        sort_books()
        update_file()
    elif choice == '5':
        print('Thank you for using the library management system!')
        break
    else:
        print('Invalid choice. Please try again!')



ToDo List
filename = "tasks.txt"

with open(filename, "r") as f:
    tasks = [line.strip() for line in f]

while True:
    print("MENU 1. Add Task 2. View Tasks 3. Exit")
    choice = input("Enter your choice: ")
    if choice == '1':
        task = input("Enter the task: ")
        tasks.append(task)
        with open(filename, "a") as f:
            f.write(task + "\n")
        print("Task added successfully!")
    elif choice == '2':
        if tasks:
            for i, task in enumerate(tasks):
                print(f"{i+1}. {task}")
        else:
            print("No tasks found.")
    elif choice == '3':
        break
    else:
        print("Invalid choice. Please try again!")

with open(filename, "w") as f:
    f.writelines("\n".join(tasks))



The digital root of a number 
def digital_root(num):
    while num>=10:
        num = sum(int(digit) for digit in str(num))
    return num
print(digital_root(45893))


def digital_root(num):
    while num>=10:
        res = 0
        for i in str(num):
            res+=int(i)
        num = res
    return num
print(digital_root(45893))


Sudoku
def is_valid_sudoku(sudoku):
    for i in range(9):
        if len(set(sudoku[i])) != 9 or len(set([sudoku[j][i] for j in range(9)])) != 9:
            return False

    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            block = []
            for k in range(3):
                block += sudoku[i + k][j:j+3]
            if len(set(block)) != 9:
                return False

    return True

sudoku = [[5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 0],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9]]
print(is_valid_sudoku(sudoku))



Students file
with open('students.txt', 'r') as infile, open('students2.txt', 'w') as outfile:
    for line in infile:
        parts = line.split()
        first_name = parts[0].capitalize()
        last_name = parts[1].capitalize()
        email = parts[2]
        phone = "301-" + parts[3]
        outfile.write(f"{first_name} {last_name}\t{email}\t{phone}\n")


